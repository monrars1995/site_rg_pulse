name: Deploy to Coolify

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install frontend dependencies
      run: npm ci
    
    - name: Install backend dependencies
      run: |
        cd server
        npm ci
    
    - name: Lint frontend
      run: npm run lint
    
    - name: Build frontend
      run: npm run build
      env:
        VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
        VITE_BACKEND_BASE_API_URL: ${{ secrets.VITE_BACKEND_BASE_API_URL }}
        VITE_BACKEND_CHAT_API_URL: ${{ secrets.VITE_BACKEND_CHAT_API_URL }}
    
    - name: Test backend health
      run: |
        cd server
        timeout 30s npm start &
        sleep 10
        curl -f http://localhost:3001/health || exit 1
      env:
        NODE_ENV: test
        PORT: 3001
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        JWT_SECRET: test-secret
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VITE_SUPABASE_URL=${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY=${{ secrets.VITE_SUPABASE_ANON_KEY }}
          VITE_BACKEND_BASE_API_URL=${{ secrets.VITE_BACKEND_BASE_API_URL }}
          VITE_BACKEND_CHAT_API_URL=${{ secrets.VITE_BACKEND_CHAT_API_URL }}

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Deploy to Coolify Staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        # Aqui voc√™ pode adicionar comandos espec√≠ficos para deploy no Coolify
        # Por exemplo, usando webhook ou API do Coolify
        curl -X POST "${{ secrets.COOLIFY_STAGING_WEBHOOK }}" \
          -H "Content-Type: application/json" \
          -d '{"ref": "${{ github.sha }}"}'

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Deploy to Coolify Production
      run: |
        echo "üöÄ Deploying to production environment..."
        # Deploy para produ√ß√£o via webhook do Coolify
        curl -X POST "${{ secrets.COOLIFY_PRODUCTION_WEBHOOK }}" \
          -H "Content-Type: application/json" \
          -d '{"ref": "${{ github.sha }}"}'
    
    - name: Notify deployment
      run: |
        echo "‚úÖ Deployment to production completed!"
        echo "üåê Application available at: ${{ secrets.PRODUCTION_URL }}"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  lighthouse:
    name: Lighthouse Performance Test
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Wait for deployment
      run: sleep 60
    
    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          ${{ secrets.STAGING_URL }}
          ${{ secrets.STAGING_URL }}/admin
        configPath: './.lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true